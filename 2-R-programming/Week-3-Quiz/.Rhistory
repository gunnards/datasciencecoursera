library(datasets)
data(iris)
# Q1 There will be an object called 'iris' in your workspace. In this dataset,
# what is the mean of 'Sepal.Length' for the species virginica?
# (Please only enter the numeric result and nothing else.)
tapply(iris$Sepal.Length, iris$Species, mean)
# Question 2
# Continuing with the 'iris' dataset from the previous Question, what R code
# returns a vector of the means of the variables 'Sepal.Length', 'Sepal.Width',
# 'Petal.Length', and 'Petal.Width'?
apply(iris[,1:4], 2, mean)
data(mtcars)
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
View(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)[1]
tapply(mtcars$mpg, mtcars$cyl, mean)["4"]
abs(tapply(mtcars$mpg, mtcars$cyl, mean)["4"] - tapply(mtcars$mpg, mtcars$cyl, mean)["8"])
abs(tapply(mtcars$hp, mtcars$cyl, mean)["4"] - tapply(mtcars$hp, mtcars$cyl, mean)["8"])
tapply(mtcars$hp, mtcars$cyl, mean)["4"]
tapply(mtcars$hp, mtcars$cyl, mean)["8"]
4cyl <- tapply(mtcars$hp, mtcars$cyl, mean)["4"]
8cyl <- tapply(mtcars$hp, mtcars$cyl, mean)["8"]
abs(4cyl - 8cyl)
4cyl <- tapply(mtcars$hp, mtcars$cyl, mean)["4"]
cyl4 <- tapply(mtcars$hp, mtcars$cyl, mean)["4"]
cyl8 <- tapply(mtcars$hp, mtcars$cyl, mean)["8"]
abs(cyl4 - cyl8)
cyl4 <- tapply(mtcars$hp, mtcars$cyl, mean)["4"]
cyl8 <- tapply(mtcars$hp, mtcars$cyl, mean)["8"]
abs(cyl4 - cyl8)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
matrix(1:9, nrow=3, ncol=3)
mat <- matrix(1:9, nrow=3, ncol=3)
solve(mat)
mat <- matrix(c(1,2), nrow=3, ncol=3)
mat <- matrix(c(1,2,1), nrow=3, ncol=3)
solve(mat)
View(mat)
mat <- matrix(1:4,2,2)
solve(mat)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
makeCacheMatrix(1:4, 2, 2)
makeCacheMatrix(mat)
makeCacheMatrix(matrix(1:4, 2, 2)
)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setsolve <- function(solve) s <<- solve
getsolve <- function() s
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
mat <- matrix(1:4,2,2)
makeCacheMatrix(mat)
matrixObject <- makeCacheMatrix(mat)
matrixObject
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- makeVector(c(1,2,3,4))
a$get()
matrixObject$get
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setsolve <- function(solve) s <<- solve
getsolve <- function() s
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
mat <- matrix(1:4,2,2)
matrixObject <- makeCacheMatrix(mat)
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
matrixObject$get
matrixObject$get()
matrixObject$set()
matrixObject$getSolve
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setsolve <- function(solve) s <<- solve
getsolve <- function() s
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
mat <- matrix(1:4,2,2)
matrixObject <- makeCacheMatrix(mat)
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- x$get()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setsolve(s)
s
}
cacheSolve(matrixObject)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setsolve <- function(solve) s <<- solve
getsolve <- function() s
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- x$get()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setsolve(s)
s
}
mat <- matrix(1:4,2,2)
solve(mat)
matrixObject <- makeCacheMatrix(mat)
matrixObject$get()
solve(matrixObject$get())
cacheSolve(matrixObject)
matrixObject$get()
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setsolve(s)
s
}
mat <- matrix(1:4,2,2)
matrixObject <- makeCacheMatrix(mat)
matrixObject$get()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setsolve <- function(solve) s <<- solve
getsolve <- function() s
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setsolve(s)
s
}
mat <- matrix(1:4,2,2)
matrixObject <- makeCacheMatrix(mat)
matrixObject$get()
matrixObject$getsolve()
cacheSolve(matrixObject)
cacheSolve(matrixObject)
